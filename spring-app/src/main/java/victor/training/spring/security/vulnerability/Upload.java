package victor.training.spring.security.vulnerability;

import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.PostConstruct;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

@Slf4j
@RestController
public class Upload {

  public static final File IN_FOLDER = new File("in/");

//  @RateLimiter()
  @PostMapping("api/vulnerability/upload")
  public synchronized String upload(@RequestParam String fileName, @RequestParam MultipartFile file) throws IOException {
    log.debug("Uploading file name={} size={}", fileName, file.getSize());

//    byte[] bytes = IOUtils.toByteArray(file.getInputStream()); // 5 x 600 MB = 3GB of heap occupied -> OOM


    File tempFile = new File(IN_FOLDER, fileName);
    System.out.println("Writing the file to " + tempFile.getAbsolutePath());
    try (FileOutputStream outputStream = new FileOutputStream(tempFile)) {
      IOUtils.copy(file.getInputStream(), outputStream);
    }
//    executorWith2Threads.execute(() -> processTakes20s(tempFile));
    return "DONE: Successfully uploaded the user file at " + tempFile.getAbsolutePath();
  }

//  @Autowired
//  private ThreadPoolTaskExecutor executorWith2Threads;

  private void processTakes20s(File tempFile) {
    // a heavy (memory-intensive, CPU, DB-intensive) method
    // 20 sec
    // i want to allow max 2 parallel exec of this method because it's resource heavy
  }

  @GetMapping("api/vulnerability/vulnerable-file-name")
  public String getVulnerableFileNameForDemo() {
    return IN_FOLDER.toPath()
            .relativize(new File("pom.xml").toPath()).toString();
  }

  @PostConstruct
  public void createInFolder() {
    IN_FOLDER.mkdir();
    if (!IN_FOLDER.isDirectory()) {
      throw new IllegalArgumentException("Should be a directory: " + IN_FOLDER.getAbsolutePath());
    }

  }

}
//class TP
