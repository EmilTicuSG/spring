package victor.training.spring.security.vulnerability;

import io.github.resilience4j.ratelimiter.RequestNotPermitted;
import io.github.resilience4j.ratelimiter.annotation.RateLimiter;
import lombok.Data;
import lombok.Value;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.annotation.security.PermitAll;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

@Slf4j
@RestController
public class BruteForce {

  private final Map<String, PasswordResetAttempt> passwordResetAttempts = Collections.synchronizedMap(new HashMap<>());

  @ExceptionHandler(RequestNotPermitted.class)
  @ResponseStatus(HttpStatus.TOO_MANY_REQUESTS)
  public void handleRequestNotPermitted() {
  }

  @PermitAll
  @GetMapping("user/{username}/reset-password/step1")
  public String resetPassword(@PathVariable String username) {
    Random random = new Random();
    int smsCode = random.nextInt(89999) + 10_000;
    passwordResetAttempts.put(username, new PasswordResetAttempt(smsCode, LocalDateTime.now().plusMinutes(1)));
    log.info("Sending smsCode to user '{}': {}", username, smsCode);
    return "SMS sent. Please check your phone";
  }

  @Value
  static class ResetStep2Request {
    int smsCode;
    String newPassword;
  }

  @PermitAll
    @RateLimiter(name = "rateLimiterApi") // #1 simple, but too global
  @PostMapping("user/{username}/reset-password/step2")
  public ResponseEntity<String> resetStep2(@PathVariable String username, @RequestBody ResetStep2Request dto) {
    PasswordResetAttempt step1 = passwordResetAttempts.get(username);
    // #2 per-attempt tracking
//    step1.attemptsLeft --;
//    if (step1.attemptsLeft <= 0) {
//      return ResponseEntity.internalServerError().body("No more attempts left");
//    }
    if (step1.attemptDeadline.isBefore(LocalDateTime.now())) {
      return ResponseEntity.internalServerError().body("Reset deadline expired");
    }

    if (step1.smsCode != dto.smsCode) {
      return ResponseEntity.internalServerError().body("Invalid code");// "Attempts left:" + step1.attemptsLeft
    }
    log.info("Password successfully changed for user: " + username + " new password: " + dto.newPassword);
    return ResponseEntity.ok("Password Changed!");
  }



  @Data
  static class PasswordResetAttempt {
    private final Integer smsCode;
    private final LocalDateTime attemptDeadline;
    private int attemptsLeft = 3;
  }

}
