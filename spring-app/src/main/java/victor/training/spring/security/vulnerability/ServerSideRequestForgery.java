package victor.training.spring.security.vulnerability;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.io.IOUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.IOException;
import java.net.URL;

@Slf4j
@RestController
public class ServerSideRequestForgery {
  @GetMapping(value = "/api/vulnerability/fetch-image",produces = "image/jpeg")
  public byte[] fetchImage(@RequestParam String url) throws IOException {
    log.info("Retrieving url: {}", url);
    // stage1 : URL allows access to file:///c:/...
    return IOUtils.toByteArray(new URL(url).openStream());

    // stage2 : RestTemplate blocks file accesses
//    return new RestTemplate().getForObject(url, byte[].class);

    // stage3: whitelist pattern: still allows port scanning
    //      if (!url.endsWith(".jpg")) {
    //         throw new IllegalArgumentException("Should end in .jpg");
    //      }
  }

  @GetMapping("/api/vulnerability/pom-absolute")
  public String getPomPath() {
    return new File("pom.xml").getAbsolutePath();
  }
}

