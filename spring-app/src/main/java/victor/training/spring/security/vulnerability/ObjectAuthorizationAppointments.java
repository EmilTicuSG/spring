package victor.training.spring.security.vulnerability;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.context.event.ApplicationStartedEvent;
import org.springframework.context.event.EventListener;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import victor.training.spring.security.vulnerability.ObjectAuthorizationAppointments.Appointment;
import victor.training.spring.security.vulnerability.ObjectAuthorizationAppointments.Patient;

import javax.persistence.*;
import javax.servlet.http.HttpSession;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

@RestController
@RequiredArgsConstructor
public class ObjectAuthorizationAppointments {
  private final PatientRepo patientRepo;

  @Data
  public static class CreatePatientRequest {
    private String name;
    private String email;
    private String phone;

  }

  @PostMapping("api/vulnerability/appointments/patient")
  public Long createPatient(@RequestBody CreatePatientRequest request, HttpSession httpSession) {
    Patient patient = new Patient()
            .setName(request.name)
            .setEmail(request.email)
            .setPhone(request.phone);
    Long patientId = patientRepo.save(patient).getId();
    httpSession.setAttribute("patientId", patientId);
    return patientId;
  }

  @Data
  public static class CreateAppointmentRequest {
    private long patientId;
    private LocalDate date;
    private LocalTime time;
    private Specialty specialty;
    private String notes;
  }

  enum Specialty {
    RADIOLOGY, CARDIOLOGY, OPHTHALMOLOGY
  }

  private final AppointmentRepo appointmentRepo;

  @PostMapping("api/vulnerability/appointments/request")
  @Transactional
  public CreateAppointmentResponse createAppointment(@RequestBody CreateAppointmentRequest request, HttpSession httpSession) {
    Long patientId = (Long) httpSession.getAttribute("patientId");
    if (request.patientId != patientId) throw new IllegalArgumentException("IllegalPatient!!!");
    Appointment appointment = new Appointment()
            .setPatient(patientRepo.getReferenceById(request.patientId))
            .setTime(request.date.atTime(request.time))
            .setSpecialty(request.specialty)
            .setNotes(request.notes);
    appointmentRepo.save(appointment);
    return new CreateAppointmentResponse(appointment);
  }

  @Data
  public static class CreateAppointmentResponse {
    private Long appointmentId;
    private String patientName;
    private String patientPhone;
    private String patientEmail;
    private String when;
    private Specialty specialty;

    public CreateAppointmentResponse(Appointment appointment) {
      appointmentId = appointment.getId();
      patientName = appointment.getPatient().getName();
      patientPhone = appointment.getPatient().getPhone();
      patientEmail = appointment.getPatient().getEmail();
      specialty = appointment.getSpecialty();
      when = appointment.getTime().format(DateTimeFormatter.ofPattern("d MMM' at 'HH:mm"));

    }
  }

  @EventListener(ApplicationStartedEvent.class)
  @Transactional
  public void insertInitialData() {
    for (int i = 0; i < 1000; i++) {
      patientRepo.save(new Patient()
              .setName("Patient #" + i)
              .setEmail("email" + i + "@gmail.com")
              .setPhone("+407" + (int) (1000000 + Math.random() * 9000000)));
    }
  }

  @Entity
  @Data
  public static class Patient {
    @Id
    @GeneratedValue
    private Long id;
    private String name;
    private String email;
    private String phone;
  }

  @Entity
  @Data
  public static class Appointment {
    @Id
    @GeneratedValue
    private Long id;
    @ManyToOne
    private Patient patient;
    private LocalDateTime time;
    @Enumerated(EnumType.STRING)
    private Specialty specialty;
    private String notes;
  }

}

interface AppointmentRepo extends JpaRepository<Appointment, Long> {
}

interface PatientRepo extends JpaRepository<Patient, Long> {
}
