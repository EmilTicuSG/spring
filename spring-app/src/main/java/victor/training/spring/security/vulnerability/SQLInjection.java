package victor.training.spring.security.vulnerability;

import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import jakarta.annotation.PostConstruct;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;

import java.sql.PreparedStatement;
import java.util.List;

@Slf4j
@Lazy
@RestController
@RequiredArgsConstructor
public class SQLInjection {
  private final JdbcTemplate jdbc;
  private final StudentRepo studentRepo;
  private final EntityManager entityManager;

    public enum OrderCol { NAME, CAMPUS  }
  @GetMapping("api/vulnerability/sql-injection")
  public List<String> sqlInjection(
      @RequestParam String name,
//      @RequestParam String order) {
      @RequestParam OrderCol order) { // whitelisting via enum = am restrictionat inputurile posibile

    String sql = "SELECT NAME || ' of ' || CAMPUS " +
                 "FROM STUDENT " +
                 "WHERE UPPER(NAME) LIKE '%' || ? || '%' " + // prone to SQL injection
                 "ORDER BY " + order; // can't use ? in ORDER BY clause

//                WHERE UPPER(NAME) LIKE '%';--%' ORDER BY name
    log.info("Executing SQL: " + sql);
    return jdbc.queryForList(sql, String.class, name.toUpperCase());
  }

  @GetMapping("api/vulnerability/jpql-injection")
  public List<Student> jpqlInjection(@RequestParam String name) {
    String userVisibleCampus = "POLI"; // eg from JWT token of the current user
    String jpql = "SELECT s FROM Student s " +
                  "WHERE s.campus='" + userVisibleCampus + "' " + // data security : visibility
//                  "AND UPPER(s.name) LIKE '%" + name.toUpperCase() + "%'";
                  "AND UPPER(s.name) LIKE '%' || :name || '%'"; // named param nu + in query
//                  "AND UPPER(s.name) LIKE '%' OR '%'='%'";
    return entityManager.createQuery(jpql, Student.class)
        .setParameter("name", name.toUpperCase())
        .getResultList();
  }

  //<editor-fold desc="initial data">
  @PostConstruct
  public void initInitialData() {
    studentRepo.save(new Student("Ana Pintilie", "POLI"));
    studentRepo.save(new Student("Costel Moraru", "POLI"));
    studentRepo.save(new Student("Marcel Tudor", "UNIBUC"));
    studentRepo.save(new Student("Crina Carteplina", "ASE"));
    log.info("Initial data inserted");
  }
  //</editor-fold>
}

interface StudentRepo extends JpaRepository<Student, Long> {

}

@Data
@Entity
class Student {
  @Id
  @GeneratedValue
  private Long id;
  private String name;
  private String campus;

  protected Student() {
  } // for Hibernate only

  public Student(String name, String campus) {
    this.name = name;
    this.campus = campus;
  }

}
