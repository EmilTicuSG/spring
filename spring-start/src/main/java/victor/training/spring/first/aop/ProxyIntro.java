package victor.training.spring.first.aop;

import lombok.extern.java.Log;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cglib.proxy.Callback;
import org.springframework.cglib.proxy.Enhancer;
import org.springframework.cglib.proxy.MethodInterceptor;
import org.springframework.cglib.proxy.MethodProxy;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.reflect.Method;
import java.util.Arrays;

import static java.lang.annotation.RetentionPolicy.RUNTIME;

public class ProxyIntro {
  public static void main(String[] args) {
    // WE play the role of Spring here ...
    Maths realBeanInstance = new Maths();
//    Maths proxy = new LoggingMathProxy(realBeanInstance);


    // CGLIB = Code Generation Library
    Callback callHandler = new MethodInterceptor() {
      @Override
      public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
        Cacheable annotation = method.getAnnotation(Cacheable.class);
        System.out.println("Cacheable: " + annotation);
        System.out.println("Calling " + method.getName() + " " + Arrays.toString(args));
        return method.invoke(realBeanInstance, args);
      }
    };
    Maths proxy = (Maths)Enhancer.create(Maths.class, callHandler);

    SecondGrade secondGrade = new SecondGrade(proxy);

    secondGrade.mathClass();
  }
}
//class Timed extends Maths {
//  @Override
//  public int sum(int a, int b) {
//    long t0 = currentTimeMillis();
//    var r=  super.sum(a, b);
//    long t1 = currentTimeMillis();
//    System.out.println("Method sum took " + (t1 - t0) + " ms");
//    return r;
//  }
//
//  @Override
//  public int product(int a, int b) {
//    System.out.println("Yey!");
//    return super.product(a, b);
//  }
//}
//class LoggingMathProxy extends Maths {
//  // a decorator pattern made pragmatic by
//  // not forcing the real implem to implement an interface
//
//  // In Java: Decorator is hand-written. Proxy is generated by a framework.
//
//  private final Maths maths; // proxies Spring creates are different instances
//  // than the instances of your class that gets proxied.
//
//  LoggingMathProxy(Maths maths) {
//    this.maths = maths;
//  }
//
//  @Override
//  public int sum(int a, int b) {
//    System.out.println("Yey!");
//    return maths.sum(a, b);
//  }
//
//  @Override
//  public int product(int a, int b) {
//    System.out.println("Yey!");
//    return maths.product(a, b);
//  }
//}
// Challenge: without touching code below this line, print a message to console
// when second grade calls any method of Maths
// --------------------------------------
@Service
class SecondGrade {
  private final Maths maths;
  SecondGrade(Maths maths) {
    this.maths = maths;
  }

  @LoggedMethod
  public void mathClass() {
    System.out.println("8 + 4 = " + maths.sum(8, 4));
    System.out.println("6 + 6 = " + maths.sum(6, 6));
    System.out.println("4 x 3 = " + maths.product(4, 3));
  }
}

@Retention(RUNTIME) // stops javac from removing it at compilation
@Component
@interface Facade{
}
// what can you put below this line -------
// to stop proxies from working? (ie no logging should happen)
@Facade
@LoggedMethod
/*final#1startup crash*/ class Maths {
//  @Secured("ROLE_ADMIN")
  @Cacheable("sums")
  public /*#2 static | #3 final = silentignore*/ int sum(int a, int b) {
    return a + b;
  }

  public int product(int a, int b) {
//     return a * b;
    int result = 0;
    for (int i = 0; i < b; i++) {
      result = sum(result, a);
      // #4 ?? local method calls are not intercepted
    }
    return result;
  }
}


// Key Points
// - Class Proxy using CGLIB Enhancer to extend the proxied class
// - Proxy limitations: final methods/classes, local calls
// - Debug a Proxy
// - Custom @Aspect

